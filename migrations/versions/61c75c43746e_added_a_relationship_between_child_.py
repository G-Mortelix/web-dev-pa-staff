from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision = '61c75c43746e'
down_revision = '9c096847c330'
branch_labels = None
depends_on = None

def upgrade():
    # Get the inspector to check if constraints already exist
    inspector = inspect(op.get_bind())

    # Check if foreign key constraint between 'folders' and 'departments' already exists
    constraints = [constraint['name'] for constraint in inspector.get_foreign_keys('folders')]
    if 'fk_folders_departments' not in constraints:  # You can name the constraint as per your DB
        with op.batch_alter_table('folders', schema=None) as batch_op:
            batch_op.create_foreign_key(None, 'departments', ['dept_id'], ['dept_id'])

    # Check if foreign key constraint between 'pdfs' and 'folders' already exists
    constraints = [constraint['name'] for constraint in inspector.get_foreign_keys('pdfs')]
    if 'fk_pdfs_folders' not in constraints:  # You can name the constraint as per your DB
        with op.batch_alter_table('pdfs', schema=None) as batch_op:
            batch_op.create_foreign_key(None, 'folders', ['folder_id'], ['folder_id'])

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('pdfs', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('folders', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
    # ### end Alembic commands ###
